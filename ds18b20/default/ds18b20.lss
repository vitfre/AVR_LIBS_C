
ds18b20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000770  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  000007e4  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000c4  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003e1  00000000  00000000  00001019  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000121  00000000  00000000  000013fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c9  00000000  00000000  0000151b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000147  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  00001ddb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a3 36       	cpi	r26, 0x63	; 99
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	2c d3       	rcall	.+1624   	; 0x69c <main>
  44:	93 c3       	rjmp	.+1830   	; 0x76c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <pause>:
unsigned int  temperature=0;
unsigned char temperature_sign=0;


void pause (unsigned int a)               //????????
{ unsigned int i;
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	00 d0       	rcall	.+0      	; 0x4e <pause+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <pause+0x8>
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
  54:	9c 83       	std	Y+4, r25	; 0x04
  56:	8b 83       	std	Y+3, r24	; 0x03

  for (i=a;i>0;i--)
  58:	8b 81       	ldd	r24, Y+3	; 0x03
  5a:	9c 81       	ldd	r25, Y+4	; 0x04
  5c:	9a 83       	std	Y+2, r25	; 0x02
  5e:	89 83       	std	Y+1, r24	; 0x01
  60:	05 c0       	rjmp	.+10     	; 0x6c <pause+0x24>
  62:	89 81       	ldd	r24, Y+1	; 0x01
  64:	9a 81       	ldd	r25, Y+2	; 0x02
  66:	01 97       	sbiw	r24, 0x01	; 1
  68:	9a 83       	std	Y+2, r25	; 0x02
  6a:	89 83       	std	Y+1, r24	; 0x01
  6c:	89 81       	ldd	r24, Y+1	; 0x01
  6e:	9a 81       	ldd	r25, Y+2	; 0x02
  70:	00 97       	sbiw	r24, 0x00	; 0
  72:	b9 f7       	brne	.-18     	; 0x62 <pause+0x1a>
   ;
}
  74:	0f 90       	pop	r0
  76:	0f 90       	pop	r0
  78:	0f 90       	pop	r0
  7a:	0f 90       	pop	r0
  7c:	cf 91       	pop	r28
  7e:	df 91       	pop	r29
  80:	08 95       	ret

00000082 <lcd_com>:

void lcd_com (unsigned char lcd)          //??????? ???
{ unsigned char temp;
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <lcd_com+0x6>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	8a 83       	std	Y+2, r24	; 0x02

  temp=(lcd&~(1<<RS))|(1<<E);
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
  90:	83 7f       	andi	r24, 0xF3	; 243
  92:	88 60       	ori	r24, 0x08	; 8
  94:	89 83       	std	Y+1, r24	; 0x01
  PORTD=temp;
  96:	82 e3       	ldi	r24, 0x32	; 50
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	29 81       	ldd	r18, Y+1	; 0x01
  9c:	fc 01       	movw	r30, r24
  9e:	20 83       	st	Z, r18
   asm("nop");
  a0:	00 00       	nop
  PORTD=temp&~(1<<E);
  a2:	82 e3       	ldi	r24, 0x32	; 50
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	29 81       	ldd	r18, Y+1	; 0x01
  a8:	27 7f       	andi	r18, 0xF7	; 247
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18

  temp=((lcd*16)&~(1<<RS))|(1<<E);
  ae:	8a 81       	ldd	r24, Y+2	; 0x02
  b0:	82 95       	swap	r24
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	83 7f       	andi	r24, 0xF3	; 243
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	89 83       	std	Y+1, r24	; 0x01
  PORTD=temp;
  ba:	82 e3       	ldi	r24, 0x32	; 50
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	29 81       	ldd	r18, Y+1	; 0x01
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
   asm("nop");
  c4:	00 00       	nop
  PORTD=temp&~(1<<E);
  c6:	82 e3       	ldi	r24, 0x32	; 50
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	29 81       	ldd	r18, Y+1	; 0x01
  cc:	27 7f       	andi	r18, 0xF7	; 247
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18

  pause (10*TIME);
  d2:	84 e6       	ldi	r24, 0x64	; 100
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	b8 df       	rcall	.-144    	; 0x48 <pause>
}
  d8:	0f 90       	pop	r0
  da:	0f 90       	pop	r0
  dc:	cf 91       	pop	r28
  de:	df 91       	pop	r29
  e0:	08 95       	ret

000000e2 <lcd_dat>:

void lcd_dat (unsigned char lcd)          //????? ??????? ?? ??? ? ??????? ???????
{ unsigned char temp;
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	00 d0       	rcall	.+0      	; 0xe8 <lcd_dat+0x6>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	8a 83       	std	Y+2, r24	; 0x02

  temp=(lcd|(1<<RS))|(1<<E);
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	8c 60       	ori	r24, 0x0C	; 12
  f2:	89 83       	std	Y+1, r24	; 0x01
  PORTD=temp;
  f4:	82 e3       	ldi	r24, 0x32	; 50
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	29 81       	ldd	r18, Y+1	; 0x01
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
   asm("nop");
  fe:	00 00       	nop
  PORTD=temp&~(1<<E);
 100:	82 e3       	ldi	r24, 0x32	; 50
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	29 81       	ldd	r18, Y+1	; 0x01
 106:	27 7f       	andi	r18, 0xF7	; 247
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18

  temp=((lcd*16)|(1<<RS))|(1<<E);
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	82 95       	swap	r24
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	8c 60       	ori	r24, 0x0C	; 12
 114:	89 83       	std	Y+1, r24	; 0x01
  PORTD=temp;
 116:	82 e3       	ldi	r24, 0x32	; 50
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	29 81       	ldd	r18, Y+1	; 0x01
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
   asm("nop");
 120:	00 00       	nop
  PORTD=temp&~(1<<E);
 122:	82 e3       	ldi	r24, 0x32	; 50
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	29 81       	ldd	r18, Y+1	; 0x01
 128:	27 7f       	andi	r18, 0xF7	; 247
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18

  pause(TIME);
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	8a df       	rcall	.-236    	; 0x48 <pause>
}
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret

0000013e <lcd_init>:

void lcd_init (void)     //????????????? ???
{
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 lcd_com(0x0c);
 146:	8c e0       	ldi	r24, 0x0C	; 12
 148:	9c df       	rcall	.-200    	; 0x82 <lcd_com>
 pause(100*TIME);
 14a:	88 ee       	ldi	r24, 0xE8	; 232
 14c:	93 e0       	ldi	r25, 0x03	; 3
 14e:	7c df       	rcall	.-264    	; 0x48 <pause>
 lcd_com(0x2c);
 150:	8c e2       	ldi	r24, 0x2C	; 44
 152:	97 df       	rcall	.-210    	; 0x82 <lcd_com>
 pause(100*TIME);
 154:	88 ee       	ldi	r24, 0xE8	; 232
 156:	93 e0       	ldi	r25, 0x03	; 3
 158:	77 df       	rcall	.-274    	; 0x48 <pause>
 lcd_com(0x01);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	92 df       	rcall	.-220    	; 0x82 <lcd_com>
 pause (100*TIME);
 15e:	88 ee       	ldi	r24, 0xE8	; 232
 160:	93 e0       	ldi	r25, 0x03	; 3
 162:	72 df       	rcall	.-284    	; 0x48 <pause>
}
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	08 95       	ret

0000016a <present_ds18b20>:

unsigned char present_ds18b20(void)
{ unsigned char res;
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	27 97       	sbiw	r28, 0x07	; 7
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61

  DDRB|= PORTB_MASK;          //???? ????????????? ??? ?????
 182:	87 e3       	ldi	r24, 0x37	; 55
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	27 e3       	ldi	r18, 0x37	; 55
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	f9 01       	movw	r30, r18
 18c:	20 81       	ld	r18, Z
 18e:	21 60       	ori	r18, 0x01	; 1
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
 194:	8b ed       	ldi	r24, 0xDB	; 219
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	9b 83       	std	Y+3, r25	; 0x03
 19a:	8a 83       	std	Y+2, r24	; 0x02
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	9b 81       	ldd	r25, Y+3	; 0x03
 1a0:	8c 01       	movw	r16, r24
 1a2:	c8 01       	movw	r24, r16
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <present_ds18b20+0x3a>
 1a8:	8c 01       	movw	r16, r24
 1aa:	1b 83       	std	Y+3, r17	; 0x03
 1ac:	0a 83       	std	Y+2, r16	; 0x02
  _delay_loop_2(475);         //???? 480???

  DDRB&=~PORTB_MASK;          //???? ????????????? ??? ????
 1ae:	87 e3       	ldi	r24, 0x37	; 55
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	27 e3       	ldi	r18, 0x37	; 55
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	f9 01       	movw	r30, r18
 1b8:	20 81       	ld	r18, Z
 1ba:	2e 7f       	andi	r18, 0xFE	; 254
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
 1c0:	81 e4       	ldi	r24, 0x41	; 65
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	9d 83       	std	Y+5, r25	; 0x05
 1c6:	8c 83       	std	Y+4, r24	; 0x04
 1c8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ca:	9d 81       	ldd	r25, Y+5	; 0x05
 1cc:	8c 01       	movw	r16, r24
 1ce:	c8 01       	movw	r24, r16
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <present_ds18b20+0x66>
 1d4:	8c 01       	movw	r16, r24
 1d6:	1d 83       	std	Y+5, r17	; 0x05
 1d8:	0c 83       	std	Y+4, r16	; 0x04
  _delay_loop_2(65);          //???? 70???

  if ((PINB&PORTB_MASK) == 0x00) res=1;  //???? ?? ???? ???????? ?????? ???????
 1da:	86 e3       	ldi	r24, 0x36	; 54
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	fc 01       	movw	r30, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	88 2f       	mov	r24, r24
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	81 70       	andi	r24, 0x01	; 1
 1e8:	90 70       	andi	r25, 0x00	; 0
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	19 f4       	brne	.+6      	; 0x1f4 <present_ds18b20+0x8a>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <present_ds18b20+0x8c>
                            else res=0;  //?? ?????????? 1, else 0
 1f4:	19 82       	std	Y+1, r1	; 0x01
 1f6:	85 e9       	ldi	r24, 0x95	; 149
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	9f 83       	std	Y+7, r25	; 0x07
 1fc:	8e 83       	std	Y+6, r24	; 0x06
 1fe:	8e 81       	ldd	r24, Y+6	; 0x06
 200:	9f 81       	ldd	r25, Y+7	; 0x07
 202:	8c 01       	movw	r16, r24
 204:	c8 01       	movw	r24, r16
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <present_ds18b20+0x9c>
 20a:	8c 01       	movw	r16, r24
 20c:	1f 83       	std	Y+7, r17	; 0x07
 20e:	0e 83       	std	Y+6, r16	; 0x06
 _delay_loop_2(405);          //???? 410???
 return res;
 210:	89 81       	ldd	r24, Y+1	; 0x01
}
 212:	27 96       	adiw	r28, 0x07	; 7
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	cf 91       	pop	r28
 220:	df 91       	pop	r29
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <send_ds18b20>:

void send_ds18b20(unsigned char command)
{ unsigned char i, data;
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	df 93       	push	r29
 22e:	cf 93       	push	r28
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	2b 97       	sbiw	r28, 0x0b	; 11
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	8b 87       	std	Y+11, r24	; 0x0b

 data=command;
 242:	8b 85       	ldd	r24, Y+11	; 0x0b
 244:	8a 83       	std	Y+2, r24	; 0x02

 for(i=0;i<8;i++)
 246:	19 82       	std	Y+1, r1	; 0x01
 248:	66 c0       	rjmp	.+204    	; 0x316 <send_ds18b20+0xee>
 {
  if ((data&0x01)==0x01) {                    	//???????? ???. 1
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	88 2f       	mov	r24, r24
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	81 70       	andi	r24, 0x01	; 1
 252:	90 70       	andi	r25, 0x00	; 0
 254:	88 23       	and	r24, r24
 256:	69 f1       	breq	.+90     	; 0x2b2 <send_ds18b20+0x8a>
                          DDRB|=PORTB_MASK;
 258:	87 e3       	ldi	r24, 0x37	; 55
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	27 e3       	ldi	r18, 0x37	; 55
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	f9 01       	movw	r30, r18
 262:	20 81       	ld	r18, Z
 264:	21 60       	ori	r18, 0x01	; 1
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9c 83       	std	Y+4, r25	; 0x04
 270:	8b 83       	std	Y+3, r24	; 0x03
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	9c 81       	ldd	r25, Y+4	; 0x04
 276:	8c 01       	movw	r16, r24
 278:	c8 01       	movw	r24, r16
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <send_ds18b20+0x52>
 27e:	8c 01       	movw	r16, r24
 280:	1c 83       	std	Y+4, r17	; 0x04
 282:	0b 83       	std	Y+3, r16	; 0x03
		  				  _delay_loop_2(2);		//6
						  DDRB&=~PORTB_MASK;
 284:	87 e3       	ldi	r24, 0x37	; 55
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	27 e3       	ldi	r18, 0x37	; 55
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	f9 01       	movw	r30, r18
 28e:	20 81       	ld	r18, Z
 290:	2e 7f       	andi	r18, 0xFE	; 254
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
 296:	8c e3       	ldi	r24, 0x3C	; 60
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	9e 83       	std	Y+6, r25	; 0x06
 29c:	8d 83       	std	Y+5, r24	; 0x05
 29e:	8d 81       	ldd	r24, Y+5	; 0x05
 2a0:	9e 81       	ldd	r25, Y+6	; 0x06
 2a2:	8c 01       	movw	r16, r24
 2a4:	c8 01       	movw	r24, r16
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <send_ds18b20+0x7e>
 2aa:	8c 01       	movw	r16, r24
 2ac:	1e 83       	std	Y+6, r17	; 0x06
 2ae:	0d 83       	std	Y+5, r16	; 0x05
 2b0:	2c c0       	rjmp	.+88     	; 0x30a <send_ds18b20+0xe2>
						  _delay_loop_2(60);	//64
                         }
                    else {                   	//???????? ???. 0
				          DDRB|=PORTB_MASK; 
 2b2:	87 e3       	ldi	r24, 0x37	; 55
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	27 e3       	ldi	r18, 0x37	; 55
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	f9 01       	movw	r30, r18
 2bc:	20 81       	ld	r18, Z
 2be:	21 60       	ori	r18, 0x01	; 1
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 83       	st	Z, r18
 2c4:	87 e3       	ldi	r24, 0x37	; 55
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	98 87       	std	Y+8, r25	; 0x08
 2ca:	8f 83       	std	Y+7, r24	; 0x07
 2cc:	8f 81       	ldd	r24, Y+7	; 0x07
 2ce:	98 85       	ldd	r25, Y+8	; 0x08
 2d0:	8c 01       	movw	r16, r24
 2d2:	c8 01       	movw	r24, r16
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <send_ds18b20+0xac>
 2d8:	8c 01       	movw	r16, r24
 2da:	18 87       	std	Y+8, r17	; 0x08
 2dc:	0f 83       	std	Y+7, r16	; 0x07
                          _delay_loop_2(55);    //60
				          DDRB&=~PORTB_MASK;
 2de:	87 e3       	ldi	r24, 0x37	; 55
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	27 e3       	ldi	r18, 0x37	; 55
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	f9 01       	movw	r30, r18
 2e8:	20 81       	ld	r18, Z
 2ea:	2e 7f       	andi	r18, 0xFE	; 254
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	9a 87       	std	Y+10, r25	; 0x0a
 2f6:	89 87       	std	Y+9, r24	; 0x09
 2f8:	89 85       	ldd	r24, Y+9	; 0x09
 2fa:	9a 85       	ldd	r25, Y+10	; 0x0a
 2fc:	8c 01       	movw	r16, r24
 2fe:	c8 01       	movw	r24, r16
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <send_ds18b20+0xd8>
 304:	8c 01       	movw	r16, r24
 306:	1a 87       	std	Y+10, r17	; 0x0a
 308:	09 87       	std	Y+9, r16	; 0x09
						  _delay_loop_2(2);		//10
                         }
  data=data>>1;
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	86 95       	lsr	r24
 30e:	8a 83       	std	Y+2, r24	; 0x02
void send_ds18b20(unsigned char command)
{ unsigned char i, data;

 data=command;

 for(i=0;i<8;i++)
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	89 83       	std	Y+1, r24	; 0x01
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	88 30       	cpi	r24, 0x08	; 8
 31a:	08 f4       	brcc	.+2      	; 0x31e <send_ds18b20+0xf6>
 31c:	96 cf       	rjmp	.-212    	; 0x24a <send_ds18b20+0x22>
				          DDRB&=~PORTB_MASK;
						  _delay_loop_2(2);		//10
                         }
  data=data>>1;
}
}
 31e:	2b 96       	adiw	r28, 0x0b	; 11
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	cf 91       	pop	r28
 32c:	df 91       	pop	r29
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	08 95       	ret

00000334 <receive_ds18b20>:

void receive_ds18b20(void)
{ unsigned char i;
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	df 93       	push	r29
 33a:	cf 93       	push	r28
 33c:	00 d0       	rcall	.+0      	; 0x33e <receive_ds18b20+0xa>
 33e:	00 d0       	rcall	.+0      	; 0x340 <receive_ds18b20+0xc>
 340:	00 d0       	rcall	.+0      	; 0x342 <receive_ds18b20+0xe>
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62

 temperature_sign=0;
 346:	10 92 62 00 	sts	0x0062, r1
 for(i=0;i<16;i++)
 34a:	19 82       	std	Y+1, r1	; 0x01
 34c:	73 c0       	rjmp	.+230    	; 0x434 <receive_ds18b20+0x100>
 {
  DDRB|=PORTB_MASK;
 34e:	87 e3       	ldi	r24, 0x37	; 55
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	27 e3       	ldi	r18, 0x37	; 55
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	f9 01       	movw	r30, r18
 358:	20 81       	ld	r18, Z
 35a:	21 60       	ori	r18, 0x01	; 1
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	9b 83       	std	Y+3, r25	; 0x03
 366:	8a 83       	std	Y+2, r24	; 0x02
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	9b 81       	ldd	r25, Y+3	; 0x03
 36c:	8c 01       	movw	r16, r24
 36e:	c8 01       	movw	r24, r16
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <receive_ds18b20+0x3c>
 374:	8c 01       	movw	r16, r24
 376:	1b 83       	std	Y+3, r17	; 0x03
 378:	0a 83       	std	Y+2, r16	; 0x02
  _delay_loop_2(2);       		//???????? 6???
  DDRB&=~PORTB_MASK;
 37a:	87 e3       	ldi	r24, 0x37	; 55
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	27 e3       	ldi	r18, 0x37	; 55
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	f9 01       	movw	r30, r18
 384:	20 81       	ld	r18, Z
 386:	2e 7f       	andi	r18, 0xFE	; 254
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
 38c:	86 e0       	ldi	r24, 0x06	; 6
 38e:	8c 83       	std	Y+4, r24	; 0x04
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 390:	8c 81       	ldd	r24, Y+4	; 0x04
 392:	18 2f       	mov	r17, r24
 394:	1a 95       	dec	r17
 396:	f1 f7       	brne	.-4      	; 0x394 <receive_ds18b20+0x60>
 398:	1c 83       	std	Y+4, r17	; 0x04
  _delay_loop_1(6);           	//???????? 9???

  if ((PINB & PORTB_MASK)==0x00) temperature&=~_BV(i);   			//?????? ???. 0
 39a:	86 e3       	ldi	r24, 0x36	; 54
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	fc 01       	movw	r30, r24
 3a0:	80 81       	ld	r24, Z
 3a2:	88 2f       	mov	r24, r24
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	81 70       	andi	r24, 0x01	; 1
 3a8:	90 70       	andi	r25, 0x00	; 0
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	c1 f4       	brne	.+48     	; 0x3de <receive_ds18b20+0xaa>
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <receive_ds18b20+0x8a>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	2a 95       	dec	r18
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <receive_ds18b20+0x86>
 3c2:	80 95       	com	r24
 3c4:	90 95       	com	r25
 3c6:	9c 01       	movw	r18, r24
 3c8:	80 91 60 00 	lds	r24, 0x0060
 3cc:	90 91 61 00 	lds	r25, 0x0061
 3d0:	82 23       	and	r24, r18
 3d2:	93 23       	and	r25, r19
 3d4:	90 93 61 00 	sts	0x0061, r25
 3d8:	80 93 60 00 	sts	0x0060, r24
 3dc:	1b c0       	rjmp	.+54     	; 0x414 <receive_ds18b20+0xe0>
                           else {
                                 temperature|=_BV(i);	           	//?????? ???. 1
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <receive_ds18b20+0xba>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	2a 95       	dec	r18
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <receive_ds18b20+0xb6>
 3f2:	9c 01       	movw	r18, r24
 3f4:	80 91 60 00 	lds	r24, 0x0060
 3f8:	90 91 61 00 	lds	r25, 0x0061
 3fc:	82 2b       	or	r24, r18
 3fe:	93 2b       	or	r25, r19
 400:	90 93 61 00 	sts	0x0061, r25
 404:	80 93 60 00 	sts	0x0060, r24
                                 if (i==12) temperature_sign=1;		//???? 12-? ?????? 1, ?? ??????????? ? ???????
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	8c 30       	cpi	r24, 0x0C	; 12
 40c:	19 f4       	brne	.+6      	; 0x414 <receive_ds18b20+0xe0>
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	80 93 62 00 	sts	0x0062, r24
 414:	82 e3       	ldi	r24, 0x32	; 50
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	9e 83       	std	Y+6, r25	; 0x06
 41a:	8d 83       	std	Y+5, r24	; 0x05
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 41c:	8d 81       	ldd	r24, Y+5	; 0x05
 41e:	9e 81       	ldd	r25, Y+6	; 0x06
 420:	8c 01       	movw	r16, r24
 422:	c8 01       	movw	r24, r16
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <receive_ds18b20+0xf0>
 428:	8c 01       	movw	r16, r24
 42a:	1e 83       	std	Y+6, r17	; 0x06
 42c:	0d 83       	std	Y+5, r16	; 0x05

void receive_ds18b20(void)
{ unsigned char i;

 temperature_sign=0;
 for(i=0;i<16;i++)
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	8f 5f       	subi	r24, 0xFF	; 255
 432:	89 83       	std	Y+1, r24	; 0x01
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	80 31       	cpi	r24, 0x10	; 16
 438:	08 f4       	brcc	.+2      	; 0x43c <receive_ds18b20+0x108>
 43a:	89 cf       	rjmp	.-238    	; 0x34e <receive_ds18b20+0x1a>
                                 temperature|=_BV(i);	           	//?????? ???. 1
                                 if (i==12) temperature_sign=1;		//???? 12-? ?????? 1, ?? ??????????? ? ???????
                                }
  _delay_loop_2(50);      											//???????? 55???
 }
}
 43c:	26 96       	adiw	r28, 0x06	; 6
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	cf 91       	pop	r28
 44a:	df 91       	pop	r29
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	08 95       	ret

00000452 <show_temp>:
           
void show_temp (void)
{ unsigned int temp_des=0, temp_int=0;
 452:	df 93       	push	r29
 454:	cf 93       	push	r28
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	27 97       	sbiw	r28, 0x07	; 7
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	1a 82       	std	Y+2, r1	; 0x02
 468:	19 82       	std	Y+1, r1	; 0x01
 46a:	1c 82       	std	Y+4, r1	; 0x04
 46c:	1b 82       	std	Y+3, r1	; 0x03
  unsigned char h,d,o;

 lcd_init();
 46e:	67 de       	rcall	.-818    	; 0x13e <lcd_init>
 lcd_dat('T');
 470:	84 e5       	ldi	r24, 0x54	; 84
 472:	37 de       	rcall	.-914    	; 0xe2 <lcd_dat>
 lcd_dat('e');
 474:	85 e6       	ldi	r24, 0x65	; 101
 476:	35 de       	rcall	.-918    	; 0xe2 <lcd_dat>
 lcd_dat('m');
 478:	8d e6       	ldi	r24, 0x6D	; 109
 47a:	33 de       	rcall	.-922    	; 0xe2 <lcd_dat>
 lcd_dat('p');
 47c:	80 e7       	ldi	r24, 0x70	; 112
 47e:	31 de       	rcall	.-926    	; 0xe2 <lcd_dat>
 lcd_dat('.');
 480:	8e e2       	ldi	r24, 0x2E	; 46
 482:	2f de       	rcall	.-930    	; 0xe2 <lcd_dat>
 lcd_dat('=');
 484:	8d e3       	ldi	r24, 0x3D	; 61
 486:	2d de       	rcall	.-934    	; 0xe2 <lcd_dat>

 if (temperature_sign==1) {
 488:	80 91 62 00 	lds	r24, 0x0062
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	71 f4       	brne	.+28     	; 0x4ac <__stack+0x4d>
                           temperature=65536-temperature;
 490:	80 91 60 00 	lds	r24, 0x0060
 494:	90 91 61 00 	lds	r25, 0x0061
 498:	90 95       	com	r25
 49a:	81 95       	neg	r24
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	90 93 61 00 	sts	0x0061, r25
 4a2:	80 93 60 00 	sts	0x0060, r24
					       lcd_dat('-');
 4a6:	8d e2       	ldi	r24, 0x2D	; 45
 4a8:	1c de       	rcall	.-968    	; 0xe2 <lcd_dat>
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__stack+0x51>
                          }
			          else lcd_dat(' ');			    
 4ac:	80 e2       	ldi	r24, 0x20	; 32
 4ae:	19 de       	rcall	.-974    	; 0xe2 <lcd_dat>

 temp_des=temperature&0b00001111;
 4b0:	80 91 60 00 	lds	r24, 0x0060
 4b4:	90 91 61 00 	lds	r25, 0x0061
 4b8:	8f 70       	andi	r24, 0x0F	; 15
 4ba:	90 70       	andi	r25, 0x00	; 0
 4bc:	9a 83       	std	Y+2, r25	; 0x02
 4be:	89 83       	std	Y+1, r24	; 0x01
 temp_int=temperature>>4;
 4c0:	80 91 60 00 	lds	r24, 0x0060
 4c4:	90 91 61 00 	lds	r25, 0x0061
 4c8:	92 95       	swap	r25
 4ca:	82 95       	swap	r24
 4cc:	8f 70       	andi	r24, 0x0F	; 15
 4ce:	89 27       	eor	r24, r25
 4d0:	9f 70       	andi	r25, 0x0F	; 15
 4d2:	89 27       	eor	r24, r25
 4d4:	9c 83       	std	Y+4, r25	; 0x04
 4d6:	8b 83       	std	Y+3, r24	; 0x03

 h=temp_int / 100;
 4d8:	8b 81       	ldd	r24, Y+3	; 0x03
 4da:	9c 81       	ldd	r25, Y+4	; 0x04
 4dc:	24 e6       	ldi	r18, 0x64	; 100
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	b9 01       	movw	r22, r18
 4e2:	30 d1       	rcall	.+608    	; 0x744 <__udivmodhi4>
 4e4:	9b 01       	movw	r18, r22
 4e6:	c9 01       	movw	r24, r18
 4e8:	8d 83       	std	Y+5, r24	; 0x05
 d=(temp_int-h*100)/10;
 4ea:	8d 81       	ldd	r24, Y+5	; 0x05
 4ec:	48 2f       	mov	r20, r24
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	2c e9       	ldi	r18, 0x9C	; 156
 4f2:	3f ef       	ldi	r19, 0xFF	; 255
 4f4:	42 9f       	mul	r20, r18
 4f6:	c0 01       	movw	r24, r0
 4f8:	43 9f       	mul	r20, r19
 4fa:	90 0d       	add	r25, r0
 4fc:	52 9f       	mul	r21, r18
 4fe:	90 0d       	add	r25, r0
 500:	11 24       	eor	r1, r1
 502:	9c 01       	movw	r18, r24
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	9c 81       	ldd	r25, Y+4	; 0x04
 508:	82 0f       	add	r24, r18
 50a:	93 1f       	adc	r25, r19
 50c:	2a e0       	ldi	r18, 0x0A	; 10
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	b9 01       	movw	r22, r18
 512:	18 d1       	rcall	.+560    	; 0x744 <__udivmodhi4>
 514:	9b 01       	movw	r18, r22
 516:	c9 01       	movw	r24, r18
 518:	8e 83       	std	Y+6, r24	; 0x06
 o=temp_int-h*100-d*10;
 51a:	9d 81       	ldd	r25, Y+5	; 0x05
 51c:	8c e9       	ldi	r24, 0x9C	; 156
 51e:	98 9f       	mul	r25, r24
 520:	90 2d       	mov	r25, r0
 522:	11 24       	eor	r1, r1
 524:	8e 81       	ldd	r24, Y+6	; 0x06
 526:	88 0f       	add	r24, r24
 528:	28 2f       	mov	r18, r24
 52a:	22 0f       	add	r18, r18
 52c:	22 0f       	add	r18, r18
 52e:	82 0f       	add	r24, r18
 530:	81 95       	neg	r24
 532:	98 0f       	add	r25, r24
 534:	8b 81       	ldd	r24, Y+3	; 0x03
 536:	89 0f       	add	r24, r25
 538:	8f 83       	std	Y+7, r24	; 0x07

 if (h!=0) lcd_dat (0x30+h);
 53a:	8d 81       	ldd	r24, Y+5	; 0x05
 53c:	88 23       	and	r24, r24
 53e:	19 f0       	breq	.+6      	; 0x546 <__stack+0xe7>
 540:	8d 81       	ldd	r24, Y+5	; 0x05
 542:	80 5d       	subi	r24, 0xD0	; 208
 544:	ce dd       	rcall	.-1124   	; 0xe2 <lcd_dat>
 if (d!=0) lcd_dat (0x30+d);
 546:	8e 81       	ldd	r24, Y+6	; 0x06
 548:	88 23       	and	r24, r24
 54a:	19 f0       	breq	.+6      	; 0x552 <__stack+0xf3>
 54c:	8e 81       	ldd	r24, Y+6	; 0x06
 54e:	80 5d       	subi	r24, 0xD0	; 208
 550:	c8 dd       	rcall	.-1136   	; 0xe2 <lcd_dat>
 lcd_dat (0x30+o);
 552:	8f 81       	ldd	r24, Y+7	; 0x07
 554:	80 5d       	subi	r24, 0xD0	; 208
 556:	c5 dd       	rcall	.-1142   	; 0xe2 <lcd_dat>
 lcd_dat ('.');
 558:	8e e2       	ldi	r24, 0x2E	; 46
 55a:	c3 dd       	rcall	.-1146   	; 0xe2 <lcd_dat>

 if(temp_des==0) lcd_dat(0x30);
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	9a 81       	ldd	r25, Y+2	; 0x02
 560:	00 97       	sbiw	r24, 0x00	; 0
 562:	19 f4       	brne	.+6      	; 0x56a <__stack+0x10b>
 564:	80 e3       	ldi	r24, 0x30	; 48
 566:	bd dd       	rcall	.-1158   	; 0xe2 <lcd_dat>
 568:	65 c0       	rjmp	.+202    	; 0x634 <__stack+0x1d5>
	else if(temp_des==1 || temp_des==2)	 lcd_dat(0x31);
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	9a 81       	ldd	r25, Y+2	; 0x02
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	91 05       	cpc	r25, r1
 572:	29 f0       	breq	.+10     	; 0x57e <__stack+0x11f>
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	9a 81       	ldd	r25, Y+2	; 0x02
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	91 05       	cpc	r25, r1
 57c:	19 f4       	brne	.+6      	; 0x584 <__stack+0x125>
 57e:	81 e3       	ldi	r24, 0x31	; 49
 580:	b0 dd       	rcall	.-1184   	; 0xe2 <lcd_dat>
 582:	58 c0       	rjmp	.+176    	; 0x634 <__stack+0x1d5>
 	else if(temp_des==3)				 lcd_dat(0x32);
 584:	89 81       	ldd	r24, Y+1	; 0x01
 586:	9a 81       	ldd	r25, Y+2	; 0x02
 588:	83 30       	cpi	r24, 0x03	; 3
 58a:	91 05       	cpc	r25, r1
 58c:	19 f4       	brne	.+6      	; 0x594 <__stack+0x135>
 58e:	82 e3       	ldi	r24, 0x32	; 50
 590:	a8 dd       	rcall	.-1200   	; 0xe2 <lcd_dat>
 592:	50 c0       	rjmp	.+160    	; 0x634 <__stack+0x1d5>
 	else if(temp_des==4 || temp_des==5)	 lcd_dat(0x33);
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	9a 81       	ldd	r25, Y+2	; 0x02
 598:	84 30       	cpi	r24, 0x04	; 4
 59a:	91 05       	cpc	r25, r1
 59c:	29 f0       	breq	.+10     	; 0x5a8 <__stack+0x149>
 59e:	89 81       	ldd	r24, Y+1	; 0x01
 5a0:	9a 81       	ldd	r25, Y+2	; 0x02
 5a2:	85 30       	cpi	r24, 0x05	; 5
 5a4:	91 05       	cpc	r25, r1
 5a6:	19 f4       	brne	.+6      	; 0x5ae <__stack+0x14f>
 5a8:	83 e3       	ldi	r24, 0x33	; 51
 5aa:	9b dd       	rcall	.-1226   	; 0xe2 <lcd_dat>
 5ac:	43 c0       	rjmp	.+134    	; 0x634 <__stack+0x1d5>
 	else if(temp_des==6 || temp_des==7)	 lcd_dat(0x34);
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	9a 81       	ldd	r25, Y+2	; 0x02
 5b2:	86 30       	cpi	r24, 0x06	; 6
 5b4:	91 05       	cpc	r25, r1
 5b6:	29 f0       	breq	.+10     	; 0x5c2 <__stack+0x163>
 5b8:	89 81       	ldd	r24, Y+1	; 0x01
 5ba:	9a 81       	ldd	r25, Y+2	; 0x02
 5bc:	87 30       	cpi	r24, 0x07	; 7
 5be:	91 05       	cpc	r25, r1
 5c0:	19 f4       	brne	.+6      	; 0x5c8 <__stack+0x169>
 5c2:	84 e3       	ldi	r24, 0x34	; 52
 5c4:	8e dd       	rcall	.-1252   	; 0xe2 <lcd_dat>
 5c6:	36 c0       	rjmp	.+108    	; 0x634 <__stack+0x1d5>
 	else if(temp_des==8)				 lcd_dat(0x35);
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	9a 81       	ldd	r25, Y+2	; 0x02
 5cc:	88 30       	cpi	r24, 0x08	; 8
 5ce:	91 05       	cpc	r25, r1
 5d0:	19 f4       	brne	.+6      	; 0x5d8 <__stack+0x179>
 5d2:	85 e3       	ldi	r24, 0x35	; 53
 5d4:	86 dd       	rcall	.-1268   	; 0xe2 <lcd_dat>
 5d6:	2e c0       	rjmp	.+92     	; 0x634 <__stack+0x1d5>
 	else if(temp_des==9 || temp_des==10) lcd_dat(0x36);
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	9a 81       	ldd	r25, Y+2	; 0x02
 5dc:	89 30       	cpi	r24, 0x09	; 9
 5de:	91 05       	cpc	r25, r1
 5e0:	29 f0       	breq	.+10     	; 0x5ec <__stack+0x18d>
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
 5e4:	9a 81       	ldd	r25, Y+2	; 0x02
 5e6:	8a 30       	cpi	r24, 0x0A	; 10
 5e8:	91 05       	cpc	r25, r1
 5ea:	19 f4       	brne	.+6      	; 0x5f2 <__stack+0x193>
 5ec:	86 e3       	ldi	r24, 0x36	; 54
 5ee:	79 dd       	rcall	.-1294   	; 0xe2 <lcd_dat>
 5f0:	21 c0       	rjmp	.+66     	; 0x634 <__stack+0x1d5>
 	else if(temp_des==11)				 lcd_dat(0x37);
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	9a 81       	ldd	r25, Y+2	; 0x02
 5f6:	8b 30       	cpi	r24, 0x0B	; 11
 5f8:	91 05       	cpc	r25, r1
 5fa:	19 f4       	brne	.+6      	; 0x602 <__stack+0x1a3>
 5fc:	87 e3       	ldi	r24, 0x37	; 55
 5fe:	71 dd       	rcall	.-1310   	; 0xe2 <lcd_dat>
 600:	19 c0       	rjmp	.+50     	; 0x634 <__stack+0x1d5>
 	else if(temp_des==12 || temp_des==13)lcd_dat(0x38);
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	9a 81       	ldd	r25, Y+2	; 0x02
 606:	8c 30       	cpi	r24, 0x0C	; 12
 608:	91 05       	cpc	r25, r1
 60a:	29 f0       	breq	.+10     	; 0x616 <__stack+0x1b7>
 60c:	89 81       	ldd	r24, Y+1	; 0x01
 60e:	9a 81       	ldd	r25, Y+2	; 0x02
 610:	8d 30       	cpi	r24, 0x0D	; 13
 612:	91 05       	cpc	r25, r1
 614:	19 f4       	brne	.+6      	; 0x61c <__stack+0x1bd>
 616:	88 e3       	ldi	r24, 0x38	; 56
 618:	64 dd       	rcall	.-1336   	; 0xe2 <lcd_dat>
 61a:	0c c0       	rjmp	.+24     	; 0x634 <__stack+0x1d5>
 	else if(temp_des==14 || temp_des==15)lcd_dat(0x39);
 61c:	89 81       	ldd	r24, Y+1	; 0x01
 61e:	9a 81       	ldd	r25, Y+2	; 0x02
 620:	8e 30       	cpi	r24, 0x0E	; 14
 622:	91 05       	cpc	r25, r1
 624:	29 f0       	breq	.+10     	; 0x630 <__stack+0x1d1>
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	9a 81       	ldd	r25, Y+2	; 0x02
 62a:	8f 30       	cpi	r24, 0x0F	; 15
 62c:	91 05       	cpc	r25, r1
 62e:	11 f4       	brne	.+4      	; 0x634 <__stack+0x1d5>
 630:	89 e3       	ldi	r24, 0x39	; 57
 632:	57 dd       	rcall	.-1362   	; 0xe2 <lcd_dat>
 lcd_dat(0xdf);
 634:	8f ed       	ldi	r24, 0xDF	; 223
 636:	55 dd       	rcall	.-1366   	; 0xe2 <lcd_dat>
 lcd_dat('C');
 638:	83 e4       	ldi	r24, 0x43	; 67
 63a:	53 dd       	rcall	.-1370   	; 0xe2 <lcd_dat>
}
 63c:	27 96       	adiw	r28, 0x07	; 7
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	f8 94       	cli
 642:	de bf       	out	0x3e, r29	; 62
 644:	0f be       	out	0x3f, r0	; 63
 646:	cd bf       	out	0x3d, r28	; 61
 648:	cf 91       	pop	r28
 64a:	df 91       	pop	r29
 64c:	08 95       	ret

0000064e <no_sensor>:

void no_sensor (void)
{ unsigned char i;
 64e:	df 93       	push	r29
 650:	cf 93       	push	r28
 652:	0f 92       	push	r0
 654:	cd b7       	in	r28, 0x3d	; 61
 656:	de b7       	in	r29, 0x3e	; 62
 lcd_init();
 658:	72 dd       	rcall	.-1308   	; 0x13e <lcd_init>
 lcd_dat ('N'); lcd_dat ('o'); lcd_dat (' '); lcd_dat ('s');
 65a:	8e e4       	ldi	r24, 0x4E	; 78
 65c:	42 dd       	rcall	.-1404   	; 0xe2 <lcd_dat>
 65e:	8f e6       	ldi	r24, 0x6F	; 111
 660:	40 dd       	rcall	.-1408   	; 0xe2 <lcd_dat>
 662:	80 e2       	ldi	r24, 0x20	; 32
 664:	3e dd       	rcall	.-1412   	; 0xe2 <lcd_dat>
 666:	83 e7       	ldi	r24, 0x73	; 115
 668:	3c dd       	rcall	.-1416   	; 0xe2 <lcd_dat>
 lcd_dat ('e'); lcd_dat ('n'); lcd_dat ('s'); lcd_dat ('o');
 66a:	85 e6       	ldi	r24, 0x65	; 101
 66c:	3a dd       	rcall	.-1420   	; 0xe2 <lcd_dat>
 66e:	8e e6       	ldi	r24, 0x6E	; 110
 670:	38 dd       	rcall	.-1424   	; 0xe2 <lcd_dat>
 672:	83 e7       	ldi	r24, 0x73	; 115
 674:	36 dd       	rcall	.-1428   	; 0xe2 <lcd_dat>
 676:	8f e6       	ldi	r24, 0x6F	; 111
 678:	34 dd       	rcall	.-1432   	; 0xe2 <lcd_dat>
 lcd_dat ('r');
 67a:	82 e7       	ldi	r24, 0x72	; 114
 67c:	32 dd       	rcall	.-1436   	; 0xe2 <lcd_dat>

 for (i=0;i<9;i++)
 67e:	19 82       	std	Y+1, r1	; 0x01
 680:	06 c0       	rjmp	.+12     	; 0x68e <no_sensor+0x40>
  pause (32000);
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	9d e7       	ldi	r25, 0x7D	; 125
 686:	e0 dc       	rcall	.-1600   	; 0x48 <pause>
 lcd_init();
 lcd_dat ('N'); lcd_dat ('o'); lcd_dat (' '); lcd_dat ('s');
 lcd_dat ('e'); lcd_dat ('n'); lcd_dat ('s'); lcd_dat ('o');
 lcd_dat ('r');

 for (i=0;i<9;i++)
 688:	89 81       	ldd	r24, Y+1	; 0x01
 68a:	8f 5f       	subi	r24, 0xFF	; 255
 68c:	89 83       	std	Y+1, r24	; 0x01
 68e:	89 81       	ldd	r24, Y+1	; 0x01
 690:	89 30       	cpi	r24, 0x09	; 9
 692:	b8 f3       	brcs	.-18     	; 0x682 <no_sensor+0x34>
  pause (32000);
}
 694:	0f 90       	pop	r0
 696:	cf 91       	pop	r28
 698:	df 91       	pop	r29
 69a:	08 95       	ret

0000069c <main>:

int main(void)
{ unsigned char i;
 69c:	df 93       	push	r29
 69e:	cf 93       	push	r28
 6a0:	0f 92       	push	r0
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62

DDRD=0xfc;             //????????????? ????? ??? ???
 6a6:	81 e3       	ldi	r24, 0x31	; 49
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	2c ef       	ldi	r18, 0xFC	; 252
 6ac:	fc 01       	movw	r30, r24
 6ae:	20 83       	st	Z, r18

PORTB&=~PORTB_MASK;     //?????????? ???? ????????	
 6b0:	88 e3       	ldi	r24, 0x38	; 56
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	28 e3       	ldi	r18, 0x38	; 56
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	f9 01       	movw	r30, r18
 6ba:	20 81       	ld	r18, Z
 6bc:	2e 7f       	andi	r18, 0xFE	; 254
 6be:	fc 01       	movw	r30, r24
 6c0:	20 83       	st	Z, r18
DDRB&=~PORTB_MASK;     //
 6c2:	87 e3       	ldi	r24, 0x37	; 55
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	27 e3       	ldi	r18, 0x37	; 55
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	f9 01       	movw	r30, r18
 6cc:	20 81       	ld	r18, Z
 6ce:	2e 7f       	andi	r18, 0xFE	; 254
 6d0:	fc 01       	movw	r30, r24
 6d2:	20 83       	st	Z, r18

pause(3200*TIME);
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	9d e7       	ldi	r25, 0x7D	; 125
 6d8:	b7 dc       	rcall	.-1682   	; 0x48 <pause>
pause(3200*TIME);
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	9d e7       	ldi	r25, 0x7D	; 125
 6de:	b4 dc       	rcall	.-1688   	; 0x48 <pause>
pause(3200*TIME);
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	9d e7       	ldi	r25, 0x7D	; 125
 6e4:	b1 dc       	rcall	.-1694   	; 0x48 <pause>
pause(3200*TIME);
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	9d e7       	ldi	r25, 0x7D	; 125
 6ea:	ae dc       	rcall	.-1700   	; 0x48 <pause>

for (i=0;i<5;i++)
 6ec:	19 82       	std	Y+1, r1	; 0x01
 6ee:	07 c0       	rjmp	.+14     	; 0x6fe <main+0x62>
{
lcd_init();
 6f0:	26 dd       	rcall	.-1460   	; 0x13e <lcd_init>
pause(200);
 6f2:	88 ec       	ldi	r24, 0xC8	; 200
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	a8 dc       	rcall	.-1712   	; 0x48 <pause>
pause(3200*TIME);
pause(3200*TIME);
pause(3200*TIME);
pause(3200*TIME);

for (i=0;i<5;i++)
 6f8:	89 81       	ldd	r24, Y+1	; 0x01
 6fa:	8f 5f       	subi	r24, 0xFF	; 255
 6fc:	89 83       	std	Y+1, r24	; 0x01
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
 700:	85 30       	cpi	r24, 0x05	; 5
 702:	b0 f3       	brcs	.-20     	; 0x6f0 <main+0x54>
pause(200);
}
        
while (1)
{   
 if (present_ds18b20()==1) {
 704:	32 dd       	rcall	.-1436   	; 0x16a <present_ds18b20>
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	d9 f4       	brne	.+54     	; 0x740 <main+0xa4>
                            send_ds18b20(0xcc);
 70a:	8c ec       	ldi	r24, 0xCC	; 204
 70c:	8d dd       	rcall	.-1254   	; 0x228 <send_ds18b20>
                            send_ds18b20(0x44);
 70e:	84 e4       	ldi	r24, 0x44	; 68
 710:	8b dd       	rcall	.-1258   	; 0x228 <send_ds18b20>

                             for (i=0;i<6;i++)
 712:	19 82       	std	Y+1, r1	; 0x01
 714:	06 c0       	rjmp	.+12     	; 0x722 <main+0x86>
                              pause (32000);
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	9d e7       	ldi	r25, 0x7D	; 125
 71a:	96 dc       	rcall	.-1748   	; 0x48 <pause>
{   
 if (present_ds18b20()==1) {
                            send_ds18b20(0xcc);
                            send_ds18b20(0x44);

                             for (i=0;i<6;i++)
 71c:	89 81       	ldd	r24, Y+1	; 0x01
 71e:	8f 5f       	subi	r24, 0xFF	; 255
 720:	89 83       	std	Y+1, r24	; 0x01
 722:	89 81       	ldd	r24, Y+1	; 0x01
 724:	86 30       	cpi	r24, 0x06	; 6
 726:	b8 f3       	brcs	.-18     	; 0x716 <main+0x7a>
                              pause (32000);

                            if (present_ds18b20()==0) no_sensor();
 728:	20 dd       	rcall	.-1472   	; 0x16a <present_ds18b20>
 72a:	88 23       	and	r24, r24
 72c:	11 f4       	brne	.+4      	; 0x732 <main+0x96>
 72e:	8f df       	rcall	.-226    	; 0x64e <no_sensor>
                                                      receive_ds18b20();
                                                      show_temp();
                                                     }
                           }
                      else  no_sensor();               
} 
 730:	e9 cf       	rjmp	.-46     	; 0x704 <main+0x68>
                             for (i=0;i<6;i++)
                              pause (32000);

                            if (present_ds18b20()==0) no_sensor();
						                        else { 
                                                      send_ds18b20(0xcc);
 732:	8c ec       	ldi	r24, 0xCC	; 204
 734:	79 dd       	rcall	.-1294   	; 0x228 <send_ds18b20>
						                              send_ds18b20(0xbe);
 736:	8e eb       	ldi	r24, 0xBE	; 190
 738:	77 dd       	rcall	.-1298   	; 0x228 <send_ds18b20>
                                                      receive_ds18b20();
 73a:	fc dd       	rcall	.-1032   	; 0x334 <receive_ds18b20>
                                                      show_temp();
 73c:	8a de       	rcall	.-748    	; 0x452 <show_temp>
                                                     }
                           }
                      else  no_sensor();               
} 
 73e:	e2 cf       	rjmp	.-60     	; 0x704 <main+0x68>
						                              send_ds18b20(0xbe);
                                                      receive_ds18b20();
                                                      show_temp();
                                                     }
                           }
                      else  no_sensor();               
 740:	86 df       	rcall	.-244    	; 0x64e <no_sensor>
} 
 742:	e0 cf       	rjmp	.-64     	; 0x704 <main+0x68>

00000744 <__udivmodhi4>:
 744:	aa 1b       	sub	r26, r26
 746:	bb 1b       	sub	r27, r27
 748:	51 e1       	ldi	r21, 0x11	; 17
 74a:	07 c0       	rjmp	.+14     	; 0x75a <__udivmodhi4_ep>

0000074c <__udivmodhi4_loop>:
 74c:	aa 1f       	adc	r26, r26
 74e:	bb 1f       	adc	r27, r27
 750:	a6 17       	cp	r26, r22
 752:	b7 07       	cpc	r27, r23
 754:	10 f0       	brcs	.+4      	; 0x75a <__udivmodhi4_ep>
 756:	a6 1b       	sub	r26, r22
 758:	b7 0b       	sbc	r27, r23

0000075a <__udivmodhi4_ep>:
 75a:	88 1f       	adc	r24, r24
 75c:	99 1f       	adc	r25, r25
 75e:	5a 95       	dec	r21
 760:	a9 f7       	brne	.-22     	; 0x74c <__udivmodhi4_loop>
 762:	80 95       	com	r24
 764:	90 95       	com	r25
 766:	bc 01       	movw	r22, r24
 768:	cd 01       	movw	r24, r26
 76a:	08 95       	ret

0000076c <_exit>:
 76c:	f8 94       	cli

0000076e <__stop_program>:
 76e:	ff cf       	rjmp	.-2      	; 0x76e <__stop_program>
