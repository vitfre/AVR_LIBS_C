
AVRASM ver. 2.1.30  C:\cvavr2\TINNY13 ADC+LCD\List\adc13.asm Tue Apr 23 14:20:43 2013

C:\cvavr2\TINNY13 ADC+LCD\List\adc13.asm(994): warning: Register r4 already defined by the .DEF directive
C:\cvavr2\TINNY13 ADC+LCD\List\adc13.asm(995): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATtiny13A
                 ;Program type             : Application
                 ;Clock frequency          : 1.000000 MHz
                 ;Memory model             : Tiny
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 16 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Smart register allocation          : Off
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny13A
                 	#pragma AVRPART MEMORY PROG_FLASH 1024
                 	#pragma AVRPART MEMORY EEPROM 64
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 159
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x009F
                 	.EQU __DSTACK_SIZE=0x0010
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOV  R30,R0
                 	MOV  R31,R1
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOV  R26,R0
                 	MOV  R27,R1
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _volt=R4
                 	.DEF _i=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c009      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
                 
                 __RESET:
00000a 94f8      	CLI
00000b 27ee      	CLR  R30
00000c bbec      	OUT  EECR,R30
00000d bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00000e e1f8      	LDI  R31,0x18
00000f b7a4      	IN   R26,MCUSR
000010 7fa7      	CBR  R26,8
000011 bfa4      	OUT  MCUSR,R26
000012 bdf1      	OUT  WDTCR,R31
000013 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000014 e08d      	LDI  R24,(14-2)+1
000015 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000016 93ed      	ST   X+,R30
000017 958a      	DEC  R24
000018 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000019 e480      	LDI  R24,__CLEAR_SRAM_SIZE
00001a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00001b 93ed      	ST   X+,R30
00001c 958a      	DEC  R24
00001d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00001e e9ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00001f bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000020 e7c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000021 c087      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x70
                 
                 	.CSEG
                 ;#include <tiny13a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x18
                 	.EQU __sm_adc_noise_red=0x08
                 	.EQU __sm_powerdown=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <ht1621.h>
                 
                 	.CSEG
                 _data:
000022 93aa      	ST   -Y,R26
                 ;	b -> Y+0
000023 d160      	RCALL SUBOPT_0x0
000024 81a8      	LD   R26,Y
000025 30a1      	CPI  R26,LOW(0x1)
000026 f419      	BRNE _0x3
000027 98c1      	CBI  0x18,1
000028 9ac2      	SBI  0x18,2
000029 c002      	RJMP _0x6F
                 _0x3:
00002a 98c1      	CBI  0x18,1
00002b 98c2      	CBI  0x18,2
                 _0x6F:
00002c 9ac1      	SBI  0x18,1
00002d d156      	RCALL SUBOPT_0x0
00002e c078      	RJMP _0x2000001
                 _cs:
00002f 93aa      	ST   -Y,R26
                 ;	b -> Y+0
000030 81a8      	LD   R26,Y
000031 30a1      	CPI  R26,LOW(0x1)
000032 f411      	BRNE _0x11
000033 9ac0      	SBI  0x18,0
000034 c001      	RJMP _0x14
                 _0x11:
000035 98c0      	CBI  0x18,0
                 _0x14:
000036 c070      	RJMP _0x2000001
                 _out_cmd:
000037 d150      	RCALL SUBOPT_0x1
                 ;	cmd -> Y+1
                 ;	maska -> R16
000038 d158      	RCALL SUBOPT_0x2
                 _0x18:
000039 d159      	RCALL SUBOPT_0x3
00003a 81a9      	LDD  R26,Y+1
00003b 23ea      	AND  R30,R26
00003c f011      	BREQ _0x1C
00003d 9ac2      	SBI  0x18,2
00003e c001      	RJMP _0x1F
                 _0x1C:
00003f 98c2      	CBI  0x18,2
                 _0x1F:
000040 d155      	RCALL SUBOPT_0x4
000041 3000      	CPI  R16,0
000042 f7b1      	BRNE _0x18
000043 98c1      	CBI  0x18,1
000044 98c2      	CBI  0x18,2
000045 9ac1      	SBI  0x18,1
000046 e0a1      	LDI  R26,LOW(1)
000047 dfe7      	RCALL _cs
000048 8108      	LDD  R16,Y+0
000049 9622      	ADIW R28,2
00004a 9508      	RET
                 _out_data:
00004b d13c      	RCALL SUBOPT_0x1
                 ;	temp1 -> Y+4
                 ;	temp2 -> Y+3
                 ;	temp3 -> Y+2
                 ;	addr -> Y+1
                 ;	maska -> R16
00004c d14c      	RCALL SUBOPT_0x5
00004d 81a9      	LDD  R26,Y+1
00004e 30a1      	CPI  R26,LOW(0x1)
00004f f431      	BRNE _0x2A
000050 d140      	RCALL SUBOPT_0x2
000051 d13f      	RCALL SUBOPT_0x2
000052 d13e      	RCALL SUBOPT_0x2
000053 d13d      	RCALL SUBOPT_0x2
000054 e0a0      	LDI  R26,LOW(0)
000055 c005      	RJMP _0x70
                 _0x2A:
000056 d13a      	RCALL SUBOPT_0x2
000057 d139      	RCALL SUBOPT_0x2
000058 d140      	RCALL SUBOPT_0x5
000059 d13f      	RCALL SUBOPT_0x5
00005a e0a1      	LDI  R26,LOW(1)
                 _0x70:
00005b dfc6      	RCALL _data
00005c d13c      	RCALL SUBOPT_0x5
                 _0x2D:
00005d d135      	RCALL SUBOPT_0x3
00005e 81ac      	LDD  R26,Y+4
00005f 23ea      	AND  R30,R26
000060 f011      	BREQ _0x31
000061 9ac2      	SBI  0x18,2
000062 c001      	RJMP _0x34
                 _0x31:
000063 98c2      	CBI  0x18,2
                 _0x34:
000064 d131      	RCALL SUBOPT_0x4
000065 3000      	CPI  R16,0
000066 f7b1      	BRNE _0x2D
000067 e800      	LDI  R16,LOW(128)
                 _0x3A:
000068 d12a      	RCALL SUBOPT_0x3
000069 81ab      	LDD  R26,Y+3
00006a 23ea      	AND  R30,R26
00006b f011      	BREQ _0x3E
00006c 9ac2      	SBI  0x18,2
00006d c001      	RJMP _0x41
                 _0x3E:
00006e 98c2      	CBI  0x18,2
                 _0x41:
00006f d126      	RCALL SUBOPT_0x4
000070 3000      	CPI  R16,0
000071 f7b1      	BRNE _0x3A
000072 e800      	LDI  R16,LOW(128)
                 _0x47:
000073 d11f      	RCALL SUBOPT_0x3
000074 81aa      	LDD  R26,Y+2
000075 23ea      	AND  R30,R26
000076 f011      	BREQ _0x4B
000077 9ac2      	SBI  0x18,2
000078 c001      	RJMP _0x4E
                 _0x4B:
000079 98c2      	CBI  0x18,2
                 _0x4E:
00007a d11b      	RCALL SUBOPT_0x4
00007b 3000      	CPI  R16,0
00007c f7b1      	BRNE _0x47
00007d 81a9      	LDD  R26,Y+1
00007e 30a1      	CPI  R26,LOW(0x1)
00007f f439      	BRNE _0x53
000080 d110      	RCALL SUBOPT_0x2
000081 d10f      	RCALL SUBOPT_0x2
000082 d116      	RCALL SUBOPT_0x5
000083 d115      	RCALL SUBOPT_0x5
000084 d10c      	RCALL SUBOPT_0x2
000085 e0a0      	LDI  R26,LOW(0)
000086 c00e      	RJMP _0x71
                 _0x53:
000087 d109      	RCALL SUBOPT_0x2
000088 d110      	RCALL SUBOPT_0x5
000089 d107      	RCALL SUBOPT_0x2
00008a d106      	RCALL SUBOPT_0x2
00008b d105      	RCALL SUBOPT_0x2
00008c d104      	RCALL SUBOPT_0x2
00008d d103      	RCALL SUBOPT_0x2
00008e d102      	RCALL SUBOPT_0x2
00008f d109      	RCALL SUBOPT_0x5
000090 d108      	RCALL SUBOPT_0x5
000091 d107      	RCALL SUBOPT_0x5
000092 d0fe      	RCALL SUBOPT_0x2
000093 d105      	RCALL SUBOPT_0x5
000094 e0a1      	LDI  R26,LOW(1)
                 _0x71:
000095 df8c      	RCALL _data
000096 d102      	RCALL SUBOPT_0x5
000097 d0f9      	RCALL SUBOPT_0x2
000098 e0a1      	LDI  R26,LOW(1)
000099 df95      	RCALL _cs
00009a 8108      	LDD  R16,Y+0
00009b 9625      	ADIW R28,5
00009c 9508      	RET
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;unsigned int volt_[6], volt;
                 ;uchar i;
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 000A {
                 _read_adc:
                 ; 0000 000B ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
00009d 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00009e 81e8      	LD   R30,Y
00009f b9e7      	OUT  0x7,R30
                 ; 0000 000C // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 000D delay_us(10);
0000a0 d0e3      	RCALL SUBOPT_0x0
                 ; 0000 000E // Start the AD conversion
                 ; 0000 000F ADCSRA|=0x40;
0000a1 9a36      	SBI  0x6,6
                 ; 0000 0010 // Wait for the AD conversion to complete
                 ; 0000 0011 while ((ADCSRA & 0x10)==0);
                 _0x55:
0000a2 9b34      	SBIS 0x6,4
0000a3 cffe      	RJMP _0x55
                 ; 0000 0012 ADCSRA|=0x10;
0000a4 9a34      	SBI  0x6,4
                 ; 0000 0013 return ADCW;
0000a5 b1e4      	IN   R30,0x4
0000a6 b1f5      	IN   R31,0x4+1
                 _0x2000001:
0000a7 9621      	ADIW R28,1
0000a8 9508      	RET
                 ; 0000 0014 }
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0018 {
                 _main:
                 ; 0000 0019 #pragma optsize-
                 ; 0000 001A CLKPR=0x80;
0000a9 e8e0      	LDI  R30,LOW(128)
0000aa bde6      	OUT  0x26,R30
                 ; 0000 001B CLKPR=0x00;
0000ab e0e0      	LDI  R30,LOW(0)
0000ac bde6      	OUT  0x26,R30
                 ; 0000 001C #ifdef _OPTIMIZE_SIZE_
                 ; 0000 001D #pragma optsize+
                 ; 0000 001E #endif
                 ; 0000 001F 
                 ; 0000 0020 PORTB=0x00;
0000ad bbe8      	OUT  0x18,R30
                 ; 0000 0021 DDRB.0=1;
0000ae 9ab8      	SBI  0x17,0
                 ; 0000 0022 DDRB.1=1;
0000af 9ab9      	SBI  0x17,1
                 ; 0000 0023 DDRB.2=1;
0000b0 9aba      	SBI  0x17,2
                 ; 0000 0024 
                 ; 0000 0025 
                 ; 0000 0026 // ADC initialization
                 ; 0000 0027 // ADC Clock frequency: 125.000 kHz
                 ; 0000 0028 // ADC Bandgap Voltage Reference: Off
                 ; 0000 0029 // ADC Auto Trigger Source: Free Running
                 ; 0000 002A // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 002B DIDR0&=0x03;
0000b1 b3e4      	IN   R30,0x14
0000b2 70e3      	ANDI R30,LOW(0x3)
0000b3 bbe4      	OUT  0x14,R30
                 ; 0000 002C DIDR0|=0x00;
0000b4 b3e4      	IN   R30,0x14
0000b5 bbe4      	OUT  0x14,R30
                 ; 0000 002D ADMUX=ADC_VREF_TYPE & 0xff;
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 b9e7      	OUT  0x7,R30
                 ; 0000 002E ADCSRA=0xA3;
0000b8 eae3      	LDI  R30,LOW(163)
0000b9 b9e6      	OUT  0x6,R30
                 ; 0000 002F ADCSRB&=0xF8;
0000ba b1e3      	IN   R30,0x3
0000bb 7fe8      	ANDI R30,LOW(0xF8)
0000bc b9e3      	OUT  0x3,R30
                 ; 0000 0030 
                 ; 0000 0031 
                 ; 0000 0032 cs(1); //pottiagivaem na plius
0000bd e0a1      	LDI  R26,LOW(1)
0000be df70      	RCALL _cs
                 ; 0000 0033 
                 ; 0000 0034  out_cmd(0b00101000); //BIAS & COM
0000bf e2a8      	LDI  R26,LOW(40)
0000c0 df76      	RCALL _out_cmd
                 ; 0000 0035  out_cmd(0b00000001); //SYSTEM ENABLE
0000c1 e0a1      	LDI  R26,LOW(1)
0000c2 df74      	RCALL _out_cmd
                 ; 0000 0036  out_cmd(0b00000011);    //TURN ON LCD
0000c3 e0a3      	LDI  R26,LOW(3)
0000c4 df72      	RCALL _out_cmd
                 ; 0000 0037  //out_cmd(0b10100000);
                 ; 0000 0038 /*==================================================================================*/
                 ; 0000 0039 /*
                 ; 0000 003A //Send Data
                 ; 0000 003B cs(0);  //set CS LOW
                 ; 0000 003C data(1);data(0);data(1);   //send command WRITE = "101"
                 ; 0000 003D data(0);data(0);data(0);data(0);data(0);data(1);     data(1);data(1);data(1);data(1);  delay_ms(200);
                 ; 0000 003E cs(1); //set CS HIGH
                 ; 0000 003F */
                 ; 0000 0040 
                 ; 0000 0041 
                 ; 0000 0042 while (1)
                 _0x5E:
                 ; 0000 0043       {
                 ; 0000 0044 
                 ; 0000 0045 read_adc(2);
0000c5 e0a2      	LDI  R26,LOW(2)
0000c6 d0d4      	RCALL SUBOPT_0x6
                 ; 0000 0046 //vmesto plavaiushei tochki uvelichivaiu vse na 10, toest vmnesto 5.0 pishu 50
                 ; 0000 0047        volt = ADCW;//  >>2;
                 ; 0000 0048        volt_[0] = (volt*5)/1023;
0000c7 e0a5      	LDI  R26,LOW(5)
0000c8 e0b0      	LDI  R27,HIGH(5)
0000c9 d0d7      	RCALL SUBOPT_0x7
0000ca 93e0 0070 	STS  _volt_,R30
0000cc 93f0 0071 	STS  _volt_+1,R31
                 ; 0000 0049        volt_[1] = ((volt*50)/1023) %10;
0000ce d0d9      	RCALL SUBOPT_0x8
0000cf e3a2      	LDI  R26,LOW(50)
0000d0 e0b0      	LDI  R27,HIGH(50)
0000d1 d0cf      	RCALL SUBOPT_0x7
0000d2 d0d8      	RCALL SUBOPT_0x9
                +
0000d3 93e0 0072+STS _volt_ + ( 2 ) , R30
0000d5 93f0 0073+STS _volt_ + ( 2 ) + 1 , R31
                 	__PUTW1MN _volt_,2
                 ; 0000 004A        volt_[2] = ((volt*500)/1023) %10;
0000d7 d0d0      	RCALL SUBOPT_0x8
0000d8 efa4      	LDI  R26,LOW(500)
0000d9 e0b1      	LDI  R27,HIGH(500)
0000da d0c6      	RCALL SUBOPT_0x7
0000db d0cf      	RCALL SUBOPT_0x9
                +
0000dc 93e0 0074+STS _volt_ + ( 4 ) , R30
0000de 93f0 0075+STS _volt_ + ( 4 ) + 1 , R31
                 	__PUTW1MN _volt_,4
                 ; 0000 004B 
                 ; 0000 004C read_adc(3);
0000e0 e0a3      	LDI  R26,LOW(3)
0000e1 d0b9      	RCALL SUBOPT_0x6
                 ; 0000 004D        volt = ADCW;//  >>2;
                 ; 0000 004E        volt_[3] = ((volt*500)/1023)*16/10;
0000e2 efa4      	LDI  R26,LOW(500)
0000e3 e0b1      	LDI  R27,HIGH(500)
0000e4 d0bc      	RCALL SUBOPT_0x7
0000e5 d0cb      	RCALL SUBOPT_0xA
                +
0000e6 93e0 0076+STS _volt_ + ( 6 ) , R30
0000e8 93f0 0077+STS _volt_ + ( 6 ) + 1 , R31
                 	__PUTW1MN _volt_,6
                 ; 0000 004F        volt_[4] = (((volt*5000)/1023) %10)*16/10;
0000ea d0bd      	RCALL SUBOPT_0x8
0000eb e8a8      	LDI  R26,LOW(5000)
0000ec e1b3      	LDI  R27,HIGH(5000)
0000ed d0b3      	RCALL SUBOPT_0x7
0000ee d0bc      	RCALL SUBOPT_0x9
0000ef d0c1      	RCALL SUBOPT_0xA
                +
0000f0 93e0 0078+STS _volt_ + ( 8 ) , R30
0000f2 93f0 0079+STS _volt_ + ( 8 ) + 1 , R31
                 	__PUTW1MN _volt_,8
                 ; 0000 0050        volt_[5] = (((volt*50000)/1023) %10)*16/10;
0000f4 d0b3      	RCALL SUBOPT_0x8
0000f5 e5a0      	LDI  R26,LOW(50000)
0000f6 ecb3      	LDI  R27,HIGH(50000)
0000f7 d0a9      	RCALL SUBOPT_0x7
0000f8 d0b2      	RCALL SUBOPT_0x9
0000f9 d0b7      	RCALL SUBOPT_0xA
                +
0000fa 93e0 007a+STS _volt_ + ( 10 ) , R30
0000fc 93f0 007b+STS _volt_ + ( 10 ) + 1 , R31
                 	__PUTW1MN _volt_,10
                 ; 0000 0051 
                 ; 0000 0052 
                 ; 0000 0053 /*
                 ; 0000 0054 if (volt_[3] > 3) {
                 ; 0000 0055 
                 ; 0000 0056      out_cmd(0b00001001);  //TONE ON
                 ; 0000 0057      delay_ms(1000);
                 ; 0000 0058      out_cmd(0b00001000);} //TONE OFF
                 ; 0000 0059      delay_ms(10000);
                 ; 0000 005A */
                 ; 0000 005B 
                 ; 0000 005C i=0;
0000fe 2466      	CLR  R6
                 ; 0000 005D while (i != 6) {
                 _0x61:
0000ff e0e6      	LDI  R30,LOW(6)
000100 15e6      	CP   R30,R6
000101 f409      	BRNE PC+2
000102 c064      	RJMP _0x63
                 ; 0000 005E        if (volt_[i] == 6) {volt_[i] = 0b11111010;}
000103 d0b4      	RCALL SUBOPT_0xB
000104 d0f7      	RCALL __GETW1P
000105 30e6      	CPI  R30,LOW(0x6)
000106 e0a0      	LDI  R26,HIGH(0x6)
000107 07fa      	CPC  R31,R26
000108 f421      	BRNE _0x64
000109 d0ae      	RCALL SUBOPT_0xB
00010a efea      	LDI  R30,LOW(250)
00010b e0f0      	LDI  R31,HIGH(250)
00010c d0b0      	RCALL SUBOPT_0xC
                 ; 0000 005F        if (volt_[i] == 1) {volt_[i] = 0b00000110;}
                 _0x64:
00010d d0aa      	RCALL SUBOPT_0xB
00010e d0ed      	RCALL __GETW1P
00010f 30e1      	CPI  R30,LOW(0x1)
000110 e0a0      	LDI  R26,HIGH(0x1)
000111 07fa      	CPC  R31,R26
000112 f421      	BRNE _0x65
000113 d0a4      	RCALL SUBOPT_0xB
000114 e0e6      	LDI  R30,LOW(6)
000115 e0f0      	LDI  R31,HIGH(6)
000116 d0a6      	RCALL SUBOPT_0xC
                 ; 0000 0060        if (volt_[i] == 2) {volt_[i] = 0b01111100;}
                 _0x65:
000117 d0a0      	RCALL SUBOPT_0xB
000118 d0e3      	RCALL __GETW1P
000119 30e2      	CPI  R30,LOW(0x2)
00011a e0a0      	LDI  R26,HIGH(0x2)
00011b 07fa      	CPC  R31,R26
00011c f421      	BRNE _0x66
00011d d09a      	RCALL SUBOPT_0xB
00011e e7ec      	LDI  R30,LOW(124)
00011f e0f0      	LDI  R31,HIGH(124)
000120 d09c      	RCALL SUBOPT_0xC
                 ; 0000 0061        if (volt_[i] == 3) {volt_[i] = 0b01011110;}
                 _0x66:
000121 d096      	RCALL SUBOPT_0xB
000122 d0d9      	RCALL __GETW1P
000123 30e3      	CPI  R30,LOW(0x3)
000124 e0a0      	LDI  R26,HIGH(0x3)
000125 07fa      	CPC  R31,R26
000126 f421      	BRNE _0x67
000127 d090      	RCALL SUBOPT_0xB
000128 e5ee      	LDI  R30,LOW(94)
000129 e0f0      	LDI  R31,HIGH(94)
00012a d092      	RCALL SUBOPT_0xC
                 ; 0000 0062        if (volt_[i] == 4) {volt_[i] = 0b11000110;}
                 _0x67:
00012b d08c      	RCALL SUBOPT_0xB
00012c d0cf      	RCALL __GETW1P
00012d 30e4      	CPI  R30,LOW(0x4)
00012e e0a0      	LDI  R26,HIGH(0x4)
00012f 07fa      	CPC  R31,R26
000130 f421      	BRNE _0x68
000131 d086      	RCALL SUBOPT_0xB
000132 ece6      	LDI  R30,LOW(198)
000133 e0f0      	LDI  R31,HIGH(198)
000134 d088      	RCALL SUBOPT_0xC
                 ; 0000 0063        if (volt_[i] == 5) {volt_[i] = 0b11011010;}
                 _0x68:
000135 d082      	RCALL SUBOPT_0xB
000136 d0c5      	RCALL __GETW1P
000137 30e5      	CPI  R30,LOW(0x5)
000138 e0a0      	LDI  R26,HIGH(0x5)
000139 07fa      	CPC  R31,R26
00013a f421      	BRNE _0x69
00013b d07c      	RCALL SUBOPT_0xB
00013c edea      	LDI  R30,LOW(218)
00013d e0f0      	LDI  R31,HIGH(218)
00013e d07e      	RCALL SUBOPT_0xC
                 ; 0000 0064        if (volt_[i] == 7) {volt_[i] = 0b00001110;}
                 _0x69:
00013f d078      	RCALL SUBOPT_0xB
000140 d0bb      	RCALL __GETW1P
000141 30e7      	CPI  R30,LOW(0x7)
000142 e0a0      	LDI  R26,HIGH(0x7)
000143 07fa      	CPC  R31,R26
000144 f421      	BRNE _0x6A
000145 d072      	RCALL SUBOPT_0xB
000146 e0ee      	LDI  R30,LOW(14)
000147 e0f0      	LDI  R31,HIGH(14)
000148 d074      	RCALL SUBOPT_0xC
                 ; 0000 0065        if (volt_[i] == 8) {volt_[i] = 0b11111110;}
                 _0x6A:
000149 d06e      	RCALL SUBOPT_0xB
00014a d0b1      	RCALL __GETW1P
00014b 30e8      	CPI  R30,LOW(0x8)
00014c e0a0      	LDI  R26,HIGH(0x8)
00014d 07fa      	CPC  R31,R26
00014e f421      	BRNE _0x6B
00014f d068      	RCALL SUBOPT_0xB
000150 efee      	LDI  R30,LOW(254)
000151 e0f0      	LDI  R31,HIGH(254)
000152 d06a      	RCALL SUBOPT_0xC
                 ; 0000 0066        if (volt_[i] == 9) {volt_[i] = 0b11011110;}
                 _0x6B:
000153 d064      	RCALL SUBOPT_0xB
000154 d0a7      	RCALL __GETW1P
000155 30e9      	CPI  R30,LOW(0x9)
000156 e0a0      	LDI  R26,HIGH(0x9)
000157 07fa      	CPC  R31,R26
000158 f421      	BRNE _0x6C
000159 d05e      	RCALL SUBOPT_0xB
00015a edee      	LDI  R30,LOW(222)
00015b e0f0      	LDI  R31,HIGH(222)
00015c d060      	RCALL SUBOPT_0xC
                 ; 0000 0067        if (volt_[i] == 0) {volt_[i] = 0b10111110;}
                 _0x6C:
00015d d05a      	RCALL SUBOPT_0xB
00015e d09d      	RCALL __GETW1P
00015f 9730      	SBIW R30,0
000160 f421      	BRNE _0x6D
000161 d056      	RCALL SUBOPT_0xB
000162 ebee      	LDI  R30,LOW(190)
000163 e0f0      	LDI  R31,HIGH(190)
000164 d058      	RCALL SUBOPT_0xC
                 ; 0000 0068 i++;
                 _0x6D:
000165 9463      	INC  R6
                 ; 0000 0069 
                 ; 0000 006A     };
000166 cf98      	RJMP _0x61
                 _0x63:
                 ; 0000 006B 
                 ; 0000 006C 
                 ; 0000 006D 
                 ; 0000 006E       delay_ms(500);
000167 efa4      	LDI  R26,LOW(500)
000168 e0b1      	LDI  R27,HIGH(500)
000169 d056      	RCALL _delay_ms
                 ; 0000 006F        out_data(volt_[0], volt_[1] | 1, volt_[2], 1);
00016a 91e0 0070 	LDS  R30,_volt_
00016c 93ea      	ST   -Y,R30
                +
00016d 91e0 0072+LDS R30 , _volt_ + ( 2 )
                 	__GETB1MN _volt_,2
00016f 60e1      	ORI  R30,1
000170 93ea      	ST   -Y,R30
                +
000171 91e0 0074+LDS R30 , _volt_ + ( 4 )
                 	__GETB1MN _volt_,4
000173 93ea      	ST   -Y,R30
000174 e0a1      	LDI  R26,LOW(1)
000175 ded5      	RCALL _out_data
                 ; 0000 0070        out_data(volt_[3] | 1, volt_[4], volt_[5], 2);
                +
000176 91e0 0076+LDS R30 , _volt_ + ( 6 )
                 	__GETB1MN _volt_,6
000178 60e1      	ORI  R30,1
000179 93ea      	ST   -Y,R30
                +
00017a 91e0 0078+LDS R30 , _volt_ + ( 8 )
                 	__GETB1MN _volt_,8
00017c 93ea      	ST   -Y,R30
                +
00017d 91e0 007a+LDS R30 , _volt_ + ( 10 )
                 	__GETB1MN _volt_,10
00017f 93ea      	ST   -Y,R30
000180 e0a2      	LDI  R26,LOW(2)
000181 dec9      	RCALL _out_data
                 ; 0000 0071        }
000182 cf42      	RJMP _0x5E
                 ; 0000 0072 }
                 _0x6E:
000183 cfff      	RJMP _0x6E
                 ;
                 ;
                 ;/*
                 ;data(0);data(0);data(0);data(0);     data(0);data(1);data(1);data(0);       //1   00000110     invert - 01100000
                 ;data(0);data(1);data(1);data(1);     data(1);data(1);data(0);data(0);       //2   01111100              00111110
                 ;data(0);data(1);data(0);data(1);     data(1);data(1);data(1);data(0);       //3   01011110              01111010
                 ;data(1);data(1);data(0);data(0);     data(0);data(1);data(1);data(0);       //4   11000110              01100011
                 ;data(1);data(1);data(0);data(1);     data(1);data(0);data(1);data(0);       //5   11011010              01011011
                 ;data(1);data(1);data(1);data(1);     data(1);data(0);data(1);data(0);       //6   11111010              01011111
                 ;data(0);data(0);data(0);data(0);     data(1);data(1);data(1);data(0);       //7   00001110              01110000
                 ;data(1);data(1);data(1);data(1);     data(1);data(1);data(1);data(0);       //8   11111110              01111111
                 ;data(1);data(1);data(0);data(1);     data(1);data(1);data(1);data(0);       //9   11011110              01111011
                 ;data(1);data(0);data(1);data(1);     data(1);data(1);data(1);data(0);       //0   10111110
                 
                 	.DSEG
                 _volt_:
000070           	.BYTE 0xC
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x0:
                +
000184 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000185 958a     +DEC R24
000186 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
000187 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
000188 93aa      	ST   -Y,R26
000189 930a      	ST   -Y,R16
00018a e800      	LDI  R16,128
00018b e0a0      	LDI  R26,LOW(0)
00018c dea2      	RCALL _cs
00018d e0a1      	LDI  R26,LOW(1)
00018e de93      	RCALL _data
00018f e0a0      	LDI  R26,LOW(0)
000190 ce91      	RJMP _data
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x2:
000191 e0a0      	LDI  R26,LOW(0)
000192 ce8f      	RJMP _data
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000193 98c1      	CBI  0x18,1
000194 2fe0      	MOV  R30,R16
000195 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000196 9506      	LSR  R16
000197 9ac1      	SBI  0x18,1
000198 cfeb      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
000199 e0a1      	LDI  R26,LOW(1)
00019a ce87      	RJMP _data
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00019b df01      	RCALL _read_adc
                +
00019c b044     +IN R4 , 4
00019d b055     +IN R5 , 4 + 1
                 	__INWR 4,5,4
                +
00019e 2de4     +MOV R30 , R4
00019f 2df5     +MOV R31 , R5
                 	__GETW1R 4,5
0001a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x7:
0001a1 d031      	RCALL __MULW12U
0001a2 2fae      	MOV  R26,R30
0001a3 2fbf      	MOV  R27,R31
0001a4 efef      	LDI  R30,LOW(1023)
0001a5 e0f3      	LDI  R31,HIGH(1023)
0001a6 d03c      	RCALL __DIVW21U
0001a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
                +
0001a8 2de4     +MOV R30 , R4
0001a9 2df5     +MOV R31 , R5
                 	__GETW1R 4,5
0001aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x9:
0001ab 2fae      	MOV  R26,R30
0001ac 2fbf      	MOV  R27,R31
0001ad e0ea      	LDI  R30,LOW(10)
0001ae e0f0      	LDI  R31,HIGH(10)
0001af d048      	RCALL __MODW21U
0001b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xA:
0001b1 d018      	RCALL __LSLW4
0001b2 2fae      	MOV  R26,R30
0001b3 2fbf      	MOV  R27,R31
0001b4 e0ea      	LDI  R30,LOW(10)
0001b5 e0f0      	LDI  R31,HIGH(10)
0001b6 d02c      	RCALL __DIVW21U
0001b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:55 WORDS
                 SUBOPT_0xB:
0001b8 2de6      	MOV  R30,R6
0001b9 e7a0      	LDI  R26,LOW(_volt_)
0001ba 0fee      	LSL  R30
0001bb 0fae      	ADD  R26,R30
0001bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
0001bd 93ed      	ST   X+,R30
0001be 93fc      	ST   X,R31
0001bf 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001c0 9610      	adiw r26,0
0001c1 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001c2 ef8a     +LDI R24 , LOW ( 0xFA )
0001c3 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001c4 9701     +SBIW R24 , 1
0001c5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001c6 95a8      	wdr
0001c7 9711      	sbiw r26,1
0001c8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001c9 9508      	ret
                 
                 __LSLW4:
0001ca 0fee      	LSL  R30
0001cb 1fff      	ROL  R31
                 __LSLW3:
0001cc 0fee      	LSL  R30
0001cd 1fff      	ROL  R31
                 __LSLW2:
0001ce 0fee      	LSL  R30
0001cf 1fff      	ROL  R31
0001d0 0fee      	LSL  R30
0001d1 1fff      	ROL  R31
0001d2 9508      	RET
                 
                 __MULW12U:
0001d3 2e0a      	MOV  R0,R26
0001d4 2e1b      	MOV  R1,R27
0001d5 e181      	LDI  R24,17
0001d6 27aa      	CLR  R26
0001d7 1bbb      	SUB  R27,R27
0001d8 c005      	RJMP __MULW12U1
                 __MULW12U3:
0001d9 f410      	BRCC __MULW12U2
0001da 0da0      	ADD  R26,R0
0001db 1db1      	ADC  R27,R1
                 __MULW12U2:
0001dc 95b6      	LSR  R27
0001dd 95a7      	ROR  R26
                 __MULW12U1:
0001de 95f7      	ROR  R31
0001df 95e7      	ROR  R30
0001e0 958a      	DEC  R24
0001e1 f7b9      	BRNE __MULW12U3
0001e2 9508      	RET
                 
                 __DIVW21U:
0001e3 2400      	CLR  R0
0001e4 2411      	CLR  R1
0001e5 e190      	LDI  R25,16
                 __DIVW21U1:
0001e6 0faa      	LSL  R26
0001e7 1fbb      	ROL  R27
0001e8 1c00      	ROL  R0
0001e9 1c11      	ROL  R1
0001ea 1a0e      	SUB  R0,R30
0001eb 0a1f      	SBC  R1,R31
0001ec f418      	BRCC __DIVW21U2
0001ed 0e0e      	ADD  R0,R30
0001ee 1e1f      	ADC  R1,R31
0001ef c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001f0 60a1      	SBR  R26,1
                 __DIVW21U3:
0001f1 959a      	DEC  R25
0001f2 f799      	BRNE __DIVW21U1
0001f3 2fea      	MOV  R30,R26
0001f4 2ffb      	MOV  R31,R27
0001f5 2da0      	MOV  R26,R0
0001f6 2db1      	MOV  R27,R1
0001f7 9508      	RET
                 
                 __MODW21U:
0001f8 dfea      	RCALL __DIVW21U
0001f9 2fea      	MOV  R30,R26
0001fa 2ffb      	MOV  R31,R27
0001fb 9508      	RET
                 
                 __GETW1P:
0001fc 91ed      	LD   R30,X+
0001fd 91fc      	LD   R31,X
0001fe 95aa      	DEC  R26
0001ff 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny13A register use summary:
r0 :   7 r1 :   7 r2 :   0 r3 :   0 r4 :   3 r5 :   3 r6 :   4 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  12 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:  10 r25:   3 r26:  86 r27:  19 r28:   4 r29:   0 r30:  97 r31:  47 
x  :   6 y  :  22 z  :   0 
Registers used: 15 out of 35 (42.9%)

ATtiny13A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   3 
adiw  :   4 and   :   4 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  26 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  11 
cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   5 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 
cpc   :   9 cpi   :  17 cpse  :   0 dec   :   6 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   8 
inc   :   1 ld    :   5 ldd   :   8 ldi   :  89 lds   :   6 lpm   :   0 
lsl   :   6 lsr   :   2 mov   :  20 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   2 out   :  15 
pop   :   0 push  :   0 rcall : 123 ret   :  18 reti  :   0 rjmp  :  32 
rol   :   7 ror   :   3 sbc   :   1 sbci  :   0 sbi   :  14 sbic  :   0 
sbis  :   1 sbiw  :   3 sbr   :   1 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  15 std   :   0 
sts   :  12 sub   :   2 subi  :   0 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 41 out of 114 (36.0%)

ATtiny13A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000400   1024      0   1024    1024 100.0%
[.dseg] 0x000060 0x00007c      0     12     12     159   7.5%
[.eseg] 0x000000 0x000000      0      0      0      64   0.0%

Assembly complete, 0 errors, 2 warnings
