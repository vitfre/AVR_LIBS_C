/*==============================================================================
 *            ---2014-2015---
 *         Catcatcat electronics
 * Геннадий Чернов
 * Библиотека для работы с шиной CAN шиной для PIC-контроллеров 18 серии
 *            2014 - июнь
 * Версии
 * V-0.01 передача только стандартные сообщения
 * V-0.02 изменена функция инициализации CAN - принцип ввода скорости
 * вводяться значение в килогерцах 83,33 вводим 83.
 * параметр  скорость @ 64MHz
 *     33 333 - 33
 *     47 619 - 47
 *     50 000 - 50
 *     83 333 - 83
 *     95 238 - 95
 *    100 000 - 100
 *    125 000 - 125
 *    200 000 - 200
 *    250 000 - 250
 *    400 000 - 400
 *    500 000 - 500
 *   1000 000 - 1000
 *--------------------------------
 * V-0.03 - исправлена ошибка приема, загрузки данных в буфер приема
 *==============================================================================
 */


//------------------------------------------------------------------------------
/*Глобальные переменные*/

/* Массив для передачи сообщений из массива ОЗУ
 * 0 - расширенный идентификатор h
 * 1 - расширенный идентификатор l
 * 2 - стандартный идентификатор h (флаг расширенного идентификатора)
 * 3 - стандартный идентификатор l
 * 4 - длительность данных (флаг запроса)
 * 5 - данные 0
 * 6 - данные 1
 * 7 - данные 2
 * 8 - данные 3
 * 9 - данные 4
 * 10 -данные 5
 * 11 -данные 6
 * 12 -данные 7
 * 13 -данные 8
 *
 * при конфигурировании обратить внимание для PIC18 к какому порту подключен модуль CAN
 * // ECAN Mux bit
 * #pragma config CANMX = PORTB	 	// PORTB	ECAN TX and RX pins are located on RB2 and RB3, respectively
 *                                      // PORTC	ECAN TX and RX pins are located on RC6 and RC7, respectively
 *  TRISB = 0b00001100;	//
 *                ||
 *                ++---------- для CAN модуля
 */

/*переменные которые можно использовать в основной программе*/
unsigned char RXBUFER[14];  // буфер приема данных
/*буфер передачи данных*/
unsigned char TXBUID[5];    // буфер ID - для загрузки идентификатора сообщения
unsigned char TXBUFER[9];   // данные - для загрузки данных

// описание флагов управления
struct 
{
    unsigned PSo:       1;  // флаг получено сообщение
    unsigned IndCAN:    1;  // флаг индикации активности шины CAN
	/* ... */
}FlagCAN;

unsigned char Speed;        // для функции автопоиска скорости передачи

//------------------------------------------------------------------------------
#ifndef _ECAN_H
#define _ECAN_H


//------------------------------------------------------------------------------
/*Определения*/
//------------------------------------------------------------------------------
#define TRUE    1
#define FALSE   0


//------------------------------------------------------------------------------
/*Описание прототипов функции*/
//------------------------------------------------------------------------------
/*Настройка модуля CAN*/
//void InitECAN(void);                // инициализация контроллера CAN
void Init_CAN(unsigned int freq, unsigned int filter1, unsigned int filter2, unsigned int filter3, unsigned int filter4, unsigned int filter5, unsigned int filter6);

void autospeed (void);  /*автонастройка на скорости передачи*/

/*прием сообщений*/
void ECAN_Receive(void);            // прием данных (вставить в функцию прерывания)

/*Передача стандартных  сообщений из массива const - фиксированные сообщения*/
void CANS_Transmit_TXB0(const char *str);

/* Функции настройки*/
/* установка
 * ID расширенного сообщения */
void CAN_EID(int EID, int SID);

/* установка
 * ID стандартного сообщения */
void CAN_SID(int SID);

/* установка
 * RTR - флаг дистанционного запроса
 * COU - количество байт передачи */
void CAN_RTR_COU(char RTR, char COU);

/* расширенные функции передачи сообщений из буферов TXBUID и TXBUFER*/
/* передача сообщения
 * TXB - Номер буфера передачи  0-2
 * PRI - Номер приоритета передачи  0-3 */
void CAN_Transmit(char TXB, char PRI);



//------------------------------------------------------------------------------
#endif