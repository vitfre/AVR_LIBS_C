;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <math.h>
;
;#define SIN_FREQ 1000 //Частота синуса
;#define MAX_INT 16 //Разрешение синуса, значение 4-256
;
;typedef unsigned char byte;
;
;//Здесь будет таблица синуса
;byte sin_table[MAX_INT];
;
;byte i;
;
;//При каждом прерывании таймера будем обновлять
;//регистр сравнения OCR2 второго таймера
;interrupt [TIM1_COMPA] void timer1_compa_isr(void) {
; 0000 0010 interrupt [7] void timer1_compa_isr(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0011 OCR2=sin_table[i];
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0012 i++;
;PCODE: $00000014 VOL: 0
; 0000 0013 #if MAX_INT<256
; 0000 0014 if (i>MAX_INT-1) i=0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0015 #endif
; 0000 0016 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;//Здесь происходит инициализация таблицы синуса
;void sin_init() {
; 0000 0019 void sin_init() {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 001A //float g=(PI/180.0)*(360.0/(float)MAX_INT);
; 0000 001B float g=2*PI/(float)MAX_INT;
; 0000 001C byte i=0;
; 0000 001D do {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;	g -> Y+1
;	i -> R17
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001E sin_table[i]=(byte)((sin((float)i*g)+1.0)*127.0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 001F i++;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0020 #if MAX_INT<256
; 0000 0021 } while(i!=MAX_INT);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0022 #else
; 0000 0023 } while (i!=0);
; 0000 0024 #endif
; 0000 0025 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;void main(void) {
; 0000 0027 void main(void) {
;PCODE: $0000004A VOL: 0
; 0000 0028 //Настраиваем порты
; 0000 0029 PORTB=0;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 002A DDRB=8;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 002B PORTC=0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 002C DDRC=0;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 002D PORTD=0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 002E DDRD=0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 002F 
; 0000 0030 //Настраиваем первый таймер на частоту 8MHz
; 0000 0031 //top=OCR1A
; 0000 0032 TCCR1A=0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0033 TCCR1B=8;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0034 TCNT1=0;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0035 ICR1=0;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0036 //Устанавливаем вершину таймера
; 0000 0037 //Здесь и регулируется частота синуса
; 0000 0038 //Формула такова [частота таймера]/[разрешение синуса]/[частота синуса]
; 0000 0039 OCR1A=16000000/MAX_INT/SIN_FREQ;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 003A OCR1B=0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003B 
; 0000 003C //Настраиваем второй таймер на частоту 8MHz
; 0000 003D //Второй таймер у нас ШИМ
; 0000 003E ASSR=0;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003F TCCR2=0x68;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0040 TCNT2=0;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0041 OCR2=0x80;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0042 
; 0000 0043 //Разрешаем прерывание первого таймера
; 0000 0044 //OCR1A
; 0000 0045 TIMSK=0x10;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0046 
; 0000 0047 //Выключаем компаратор, он нам не нужен
; 0000 0048 ACSR=0x80;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0049 
; 0000 004A //Разрешаем прерывания
; 0000 004B #asm("sei")
;PCODE: $0000006F VOL: 0
	sei
;PCODE: $00000070 VOL: 0
; 0000 004C 
; 0000 004D //Собственно инициализируем таблицу
; 0000 004E sin_init();
;PCODE: $00000071 VOL: 0
; 0000 004F 
; 0000 0050 //Включаем таймеры
; 0000 0051 TCCR2|=1;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0052 TCCR1B|=1;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0053 while (1)
;PCODE: $00000078 VOL: 0
; 0000 0054 {
; 0000 0055 
; 0000 0056 
; 0000 0057 
; 0000 0058 }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0059 }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
