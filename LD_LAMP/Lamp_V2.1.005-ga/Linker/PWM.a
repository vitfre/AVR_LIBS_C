;#include <tiny25.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;
;#include <delay.h>
;
;
;//#define                                sel PINB.0
;#define                                pls PINB.3
;#define                                mns PINB.4
;
;#define speaker                  PORTB.0  //17 Пискун
;
;#define ADC_VREF_TYPE 0x00
;
;// Declare your global variables here
;
;
;unsigned int PWM0=0,PWM=0,fl=0,fl1=0,temp=0;
;eeprom unsigned char PWM_eeprom=100;
;
;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0018 {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0019 ADMUX=(adc_input & 0x0f) | ADC_VREF_TYPE;
;	adc_input -> Y+0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 001A // Delay needed for the stabilization of the ADC input voltage
; 0000 001B delay_us(10);
;PCODE: $00000011 VOL: 0
; 0000 001C // Start the AD conversion
; 0000 001D ADCSRA|=0x40;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 001E // Wait for the AD conversion to complete
; 0000 001F while ((ADCSRA & 0x10)==0);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0020 ADCSRA|=0x10;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0021 return ADCW;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0022 }
;PCODE: $0000001F VOL: 0
;
;
;//**********************************************************************
;void beep (unsigned char squeak)  //Робимо пік
; 0000 0027 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0028 for (;squeak>0; squeak--)
;	squeak -> Y+0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0029 {
; 0000 002A for (temp=50; temp; temp--)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002B {
; 0000 002C speaker=!speaker;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002D delay_us(300);
;PCODE: $0000003D VOL: 0
; 0000 002E }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 002F //delay_us(900);
; 0000 0030 }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0031 }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;
;
;
;
;void main(void)
; 0000 0037 {
;PCODE: $0000004D VOL: 0
; 0000 0038 // Declare your local variables here
; 0000 0039 
; 0000 003A // Crystal Oscillator division factor: 1
; 0000 003B #pragma optsize-
; 0000 003C CLKPR=0x80;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003D CLKPR=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 003E #ifdef _OPTIMIZE_SIZE_
; 0000 003F #pragma optsize+
; 0000 0040 #endif
; 0000 0041 
; 0000 0042 // Input/Output Ports initialization
; 0000 0043 // Port B initialization
; 0000 0044 // Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 0045 // State5=T State4=P State3=P State2=P State1=0 State0=0
; 0000 0046 PORTB=0x1C;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0047 DDRB=0x03;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0048 
; 0000 0049 // Timer/Counter 0 initialization
; 0000 004A // Clock source: System Clock
; 0000 004B // Clock value: 125,000 kHz
; 0000 004C // Mode: Fast PWM top=0xFF
; 0000 004D // OC0A output: Disconnected
; 0000 004E // OC0B output: Non-Inverted PWM
; 0000 004F TCCR0A=0x23;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0050 TCCR0B=0x03;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0051 TCNT0=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0052 OCR0A=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0053 OCR0B=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0054 
; 0000 0055 // Timer/Counter 1 initialization
; 0000 0056 // Clock source: System Clock
; 0000 0057 // Clock value: Timer1 Stopped
; 0000 0058 // Mode: Normal top=0xFF
; 0000 0059 // OC1A output: Disconnected
; 0000 005A // OC1B output: Disconnected
; 0000 005B // Timer1 Overflow Interrupt: Off
; 0000 005C // Compare A Match Interrupt: Off
; 0000 005D // Compare B Match Interrupt: Off
; 0000 005E PLLCSR=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 005F 
; 0000 0060 TCCR1=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0061 GTCCR=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0062 TCNT1=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0063 OCR1A=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0064 OCR1B=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0065 OCR1C=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0066 
; 0000 0067 // External Interrupt(s) initialization
; 0000 0068 // INT0: Off
; 0000 0069 // Interrupt on any change on pins PCINT0-5: Off
; 0000 006A GIMSK=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 006B MCUCR=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 006C 
; 0000 006D // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 006E TIMSK=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 006F 
; 0000 0070 // Universal Serial Interface initialization
; 0000 0071 // Mode: Disabled
; 0000 0072 // Clock source: Register & Counter=no clk.
; 0000 0073 // USI Counter Overflow Interrupt: Off
; 0000 0074 USICR=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0075 
; 0000 0076 // Analog Comparator initialization
; 0000 0077 // Analog Comparator: Off
; 0000 0078 ACSR=0x80;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0079 ADCSRB=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 007A DIDR0=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 007B 
; 0000 007C 
; 0000 007D // ADC initialization
; 0000 007E // ADC Clock frequency: 125,000 kHz
; 0000 007F // ADC Voltage Reference: AVCC pin
; 0000 0080 // ADC Bipolar Input Mode: Off
; 0000 0081 // ADC Reverse Input Polarity: Off
; 0000 0082 // ADC Auto Trigger Source: ADC Stopped
; 0000 0083 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 0084 DIDR0&=0x03;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0085 DIDR0|=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0086 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0087 ADCSRA=0x86;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0088 ADCSRB&=0x5F;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0089 
; 0000 008A 
; 0000 008B beep (15);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 008C PWM=PWM_eeprom;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 008D 
; 0000 008E while (PWM0<PWM)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 008F {
; 0000 0090     PWM0++;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0091     OCR0B=PWM0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0092     delay_ms(10);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0093 }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0094 beep (4);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0095 
; 0000 0096 while (1)
;PCODE: $000000A1 VOL: 0
; 0000 0097       {
; 0000 0098 //Опитування кнопок + і - і s
; 0000 0099 while (pls==0)
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 009A {
; 0000 009B     PWM0++;  //якщо кнопка нажата то +1
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 009C     if (pls==0&mns==0)
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 009D     {
; 0000 009E         beep (15);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 009F         PWM=254;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00A0         while (PWM0<PWM)
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00A1         {
; 0000 00A2             PWM0++;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00A3             if (PWM0>254) {PWM0=254;}
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00A4             OCR0B=PWM0;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00A5             delay_ms(40);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00A6         }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00A7         beep (4);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00A8     };
;PCODE: $000000D0 VOL: 0
; 0000 00A9     if (PWM0>=254)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00AA     {
; 0000 00AB         PWM0=254;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00AC         beep (1);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00AD         delay_ms(200);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00AE     };
;PCODE: $000000DC VOL: 0
; 0000 00AF     delay_ms(10);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00B0     OCR0B=PWM0;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00B1 };
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00B2 
; 0000 00B3 while (mns==0)
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00B4 {
; 0000 00B5 PWM0--;   //якщо кнопка нажата то -1
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00B6 if (pls==0&mns==0)
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00B7 {
; 0000 00B8     beep (15);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00B9     PWM=1;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00BA     while (PWM0>PWM)
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00BB     {
; 0000 00BC         PWM0--;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00BD         if (PWM<1)
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00BE         {
; 0000 00BF             PWM=1;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00C0         }
; 0000 00C1         OCR0B=PWM0;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00C2         delay_ms(40);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00C3     }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00C4     beep (4);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00C5 }
; 0000 00C6 
; 0000 00C7 
; 0000 00C8 if (PWM0<1)
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00C9 {
; 0000 00CA     PWM0=1;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00CB     beep (1);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00CC     delay_ms(200);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00CD }
; 0000 00CE delay_ms(10);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00CF OCR0B=PWM0;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00D0 }
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00D1 
; 0000 00D2 
; 0000 00D3 if (PWM0==PWM_eeprom) {;}
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00D4 else  {PWM_eeprom=PWM0;}
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00D5 
; 0000 00D6 }}
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
